// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Modelo de Usuario
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relaciones
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  addresses     Address[]
}

// Enumeración para roles de usuario
enum Role {
  USER
  ADMIN
}

// Modelo para cuentas de autenticación (usado por NextAuth)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Modelo para sesiones de usuario (usado por NextAuth)
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Modelo para tokens de verificación (usado por NextAuth)
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Modelo para categorías de productos
model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  slug        String    @unique
  image       String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relaciones many-to-many con productos
  productCategories ProductCategory[]
}

// Modelo para productos
model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  stock       Int      @default(0)
  slug        String   @unique
  images      String
  featured    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relaciones many-to-many con categorías
  productCategories ProductCategory[]
  orderItems        OrderItem[]
  cartItems         CartItem[]
}

// Tabla de relación para productos y categorías (many-to-many)
model ProductCategory {
  id         String   @id @default(cuid())
  productId  String
  categoryId String
  createdAt  DateTime @default(now())
  
  // Relaciones
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  // Índice único para evitar duplicados
  @@unique([productId, categoryId])
}

// Modelo para direcciones de envío
model Address {
  id         String   @id @default(cuid())
  street     String
  city       String
  state      String
  postalCode String
  country    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  // Relaciones
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders     Order[]
}

// Modelo para órdenes/pedidos
model Order {
  id              String     @id @default(cuid())
  status          OrderStatus @default(PENDING)
  total           Float
  paymentIntentId String?
  paymentMethod   PaymentMethod?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  // Relaciones
  userId          String
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  addressId       String?
  address         Address?   @relation(fields: [addressId], references: [id])
  items           OrderItem[]
}

// Modelo para items de orden
model OrderItem {
  id        String   @id @default(cuid())
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
}

// Modelo para el carrito de compras
model Cart {
  id        String     @id @default(cuid())
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  // Relaciones
  userId    String?    @unique
}

// Modelo para items del carrito
model CartItem {
  id        String   @id @default(cuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relaciones
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id])
}

// Enumeración para estado de órdenes
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

// Enumeración para métodos de pago
enum PaymentMethod {
  MERCADOPAGO
  TRANSBANK
  PAYPAL
}
